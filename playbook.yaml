- name: Fabricant
  hosts: localhost
  vars_files:
    - fabricant_users.yaml
  vars:
    ansible_python_interpreter: /home/fabricant-admin/fabricant-prod/.venv/bin/python
  tasks:
# Set up bw
  - name: Install nvm
    ansible.builtin.shell: >
      curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh | bash
    args:
      creates: "{{ ansible_env.HOME }}/.nvm/nvm.sh"
  - name: Install npm
    ansible.builtin.shell: "source {{ ansible_env.HOME }}/.nvm/nvm.sh && nvm install v24.3.0"
    args:
      executable: /bin/bash
      creates: "{{ ansible_env.HOME }}/.nvm/versions/node/v24.3.0/bin/npm"
  - name: Install BitWarden CLI
    ansible.builtin.command:
      cmd: >
        bash -c "source $HOME/.nvm/nvm.sh && nvm exec v24.3.0 && npm install -g @bitwarden/cli"
      creates: "{{ ansible_env.HOME }}/.nvm/versions/node/v24.3.0/bin/bw"
  - name: Bootstrap BW Creds
    ansible.builtin.shell:
      cmd: '{{ansible_env.HOME}}/.nvm/versions/node/v24.3.0/bin/node {{ansible_env.HOME}}/.nvm/versions/node/v24.3.0/lib/node_modules/@bitwarden/cli/build/bw.js unlock --raw > .bw_session'
      chdir: '{{ansible_env.HOME}}/fabricant-prod'
      creates: '{{ansible_env.HOME}}/fabricant-prod/.bw_session'
  - name: Sync BW Client
    ansible.builtin.shell:
      cmd: '{{ansible_env.HOME}}/.nvm/versions/node/v24.3.0/bin/node {{ansible_env.HOME}}/.nvm/versions/node/v24.3.0/lib/node_modules/@bitwarden/cli/build/bw.js sync --session `cat .bw_session`'
      chdir: '{{ansible_env.HOME}}/fabricant-prod'

# Set timezone
  - name: Set timezone to America/Los_Angeles
    become: true
    community.general.timezone:
      name: America/Los_Angeles

# Set netplan
  - name: Install netplan config
    become: true
    ansible.builtin.copy:
      src: netplan/01-fabricant-prod.yml
      dest: /etc/netplan/01-fabricant-prod.yaml
      owner: root
      group: root
      mode: '0600'
  - name: Netplan Apply
    become: true
    ansible.builtin.command:
      cmd: netplan apply

# Packages
  - name: Ensure that system is up to date
    become: true
    apt:
      name: "*"
      state: latest
      autoremove: yes
      update_cache: yes
  - name: Install/update system packages
    become: true
    ansible.builtin.apt:
      pkg:
        - python3
        - build-essential
        # pyenv
        - libssl-dev
        - zlib1g-dev
        - libbz2-dev
        - libreadline-dev
        - libsqlite3-dev
        - curl
        - git
        - libncursesw5-dev
        - xz-utils
        - tk-dev
        - libxml2-dev
        - libxmlsec1-dev
        - libffi-dev
        - liblzma-dev
        - sshfs
        - policykit-1
        - cifs-utils
        - acl
        - qemu-guest-agent
  - name: Ensure these packages are not installed
    become: true
    ansible.builtin.apt:
      state: absent
      pkg:
        - cups-browsed
        - cups-filters
        - cups-filters-core-drivers
        - libcupsfilters2t64
  - import_tasks: unattended-upgrades.yml

# Setup Docker
  - import_tasks: docker_ubuntu_24.yaml

# Monitoring
  - import_tasks: monitoring.yaml

# # UFW
#   - import_tasks: ufw.yml

# Qualys/Trellix
  - import_tasks: oec_qualys_trellix.yaml
    vars:
      installer: '{{ansible_env.HOME}}/installers/qualys_trellix/oec-qualystrellixinstallers-linux.tgz'

# Web Services
  - import_tasks: web_services.yaml
  - name: Deny SSH login
    become: true
    ansible.builtin.lineinfile:
      line: DenyGroups services
      path: /etc/ssh/sshd_config
      regexp: "^(#)?DenyGroups"
      state: present
    notify:
      - restart sshd
# Create users:
  - import_tasks: create_users.yaml

# Auto deploy
  - name: Ensure systemd user dir exists
    ansible.builtin.file:
      path: .config/systemd/user/
      state: directory
  - name: Deploy self updater
    ansible.builtin.template:
      src: ansible_deploy_service.service
      dest: .config/systemd/user/ansible_deploy_service.service
  - name: Enable ansible_deploy_service
    ansible.builtin.systemd_service:
      enabled: true
      name: ansible_deploy_service
      state: started
      scope: user
  - name: enable login linger
    ansible.builtin.command:
      cmd: loginctl enable-linger {{ ansible_user_id }}

  - name: Ensure secrets dir exists
    ansible.builtin.file:
      path: '{{ansible_env.HOME}}/fabricant-prod/.secrets/'
      state: directory
  - name: Ensure prometheus data dir exists
    ansible.builtin.file:
      path: '{{ansible_env.HOME}}/fabricant-prod/prometheus-data/'
      state: directory
      mode: '0777'
  - name: Deploy gf_admin_password
    ansible.builtin.shell:
      cmd: '{{ansible_env.HOME}}/.nvm/versions/node/v24.3.0/bin/node {{ansible_env.HOME}}/.nvm/versions/node/v24.3.0/lib/node_modules/@bitwarden/cli/build/bw.js --session `cat .bw_session` get password "dashboard.waiter.ucsd.edu admin" > {{ansible_env.HOME}}/fabricant-prod/.secrets/gf_admin_password.txt'
      chdir: '{{ansible_env.HOME}}/fabricant-prod'
      creates: '{{ansible_env.HOME}}/fabricant-prod/.secrets/gf_admin_password.txt'
  - name: Setup Label Studio
    import_tasks: label_studio.yaml
  - name: Setup authentik
    import_tasks: authentik.yaml
  
# This always at the end
  - name: Deploy Docker Secrets
    import_tasks: docker/docker_secrets.yml
  - name: Deploy minio_admin_password
    ansible.builtin.shell:
      cmd: '{{ansible_env.HOME}}/.nvm/versions/node/v24.3.0/bin/node {{ansible_env.HOME}}/.nvm/versions/node/v24.3.0/lib/node_modules/@bitwarden/cli/build/bw.js --session `cat .bw_session` get password "mc.fabricant.ucsd.edu admin" > {{ansible_env.HOME}}/fabricant-prod/.secrets/minio_admin_password.txt'
      chdir: '{{ansible_env.HOME}}/fabricant-prod'
      creates: '{{ansible_env.HOME}}/fabricant-prod/.secrets/minio_admin_password.txt'
  - name: Create docker network caddy_proxy
    become: true
    community.docker.docker_network:
      name: caddy_proxy
      state: present
  - name: Docker compose
    community.docker.docker_compose_v2:
      project_src: '{{ansible_env.HOME}}/fabricant-prod/'
      pull: 'always'
      remove_orphans: true
      remove_volumes: true

  handlers:
  # Restart Docker if necessary.  This happens after ALL tasks are executed, including the docker-compose task.
  - name: Restart Docker
    become: true
    service:
      name: docker
      state: restarted
  - name: restart sshd
    become: true
    service:
      name: sshd
      state: reloaded
