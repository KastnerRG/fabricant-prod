services:
  prometheus:
    image: prom/prometheus:v2.55.0
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    restart: unless-stopped
    volumes:
      - ./prometheus:/etc/prometheus:ro
      - ./prometheus-data:/prometheus:rw
    user: "${USER_ID}:${GROUP_ID}"
    ports:
      - 9090:9090
  alertmanager:
    image: quay.io/prometheus/alertmanager
    container_name: alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
    restart: unless-stopped
    volumes:
      - ./alertmanager:/etc/alertmanager:ro
    ports:
      - 9093:9093
  caddy:
    image: lucaslorentz/caddy-docker-proxy:2.9.1
    container_name: caddy
    restart: always
    ports:
      - 80:80
      - 443:443
    environment:
      - CADDY_INGRESS_NETWORKS=caddy_proxy
    networks:
      caddy_proxy:
        aliases:
          - s3.fabricant.ucsd.edu
          - mc.fabricant.ucsd.edu
          - auth.fabricant.ucsd.edu
          - labeler.e4e.ucsd.edu
          - data.smartfin.e4e.ucsd.edu
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./caddy-data:/data
    userns_mode: host
    user: "${USER_ID}:${GROUP_ID}"
  
  postgres_label_studio:
    image: postgres:16.4
    container_name: postgres_label_studio
    restart: always
    shm_size: 128 mb
    environment:
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_admin_password
    volumes:
      - ./postgres/data/:/var/lib/postgresql/data/:rw
      - ./postgres/config/:/etc/postgresql/:ro
      - ./postgres/scripts/:/docker-entrypoint-initdb.d/:ro
      - /etc/passwd:/etc/passwd:ro
    secrets:
      - postgres_admin_password
    command: --config_file=/etc/postgresql/postgres.conf
    ports:
      - 5433:5432
    networks:
      - label_studio
    user: "${USER_ID}:${GROUP_ID}"

  label_studio_pg:
    container_name: label-studio
    image: ghcr.io/ucsd-e4e/label-studio:20250118.193659-release-1-15-0-caf6134
    restart: unless-stopped
    depends_on:
      - postgres_label_studio
    networks:
      - label_studio
      - caddy_proxy
    volumes:
      - ./label_studio_data_pg:/label-studio/data
      - /share/label-studio/files:/data
    environment:
      - LABEL_STUDIO_LOCAL_FILES_SERVING_ENABLED=true
      - LABEL_STUDIO_LOCAL_FILES_DOCUMENT_ROOT=/data
      - LABEL_STUDIO_DISABLE_SIGNUP_WITHOUT_LINK=true
      - LABEL_STUDIO_USERNAME=e4e@ucsd.edu
      - CSRF_TRUSTED_ORIGINS=https://labeler.e4e.ucsd.edu
      - DJANGO_DB=default
      - POSTGRE_NAME=label_studio
      - POSTGRE_USER=label_studio_pg
      - POSTGRE_PORT=5432
      - POSTGRE_HOST=postgres_label_studio
    labels:
      caddy: labeler.e4e.ucsd.edu
      caddy.reverse_proxy: "{{upstreams 8080}}"
    env_file:
      - .secrets/label_studio_admin_password_pg.env

  postgres_authentik:
    image: postgres:16.10
    container_name: postgres_authentik
    restart: unless-stopped
    shm_size: 128 mb
    environment:
      POSTGRES_PASSWORD_FILE: /run/secrets/authentik_postgres_admin_password
    volumes:
      - ./authentik/postgres/data/:/var/lib/postgresql/data/:rw
      - ./authentik/postgres/config/:/etc/postgresql/:ro
      - ./authentik/postgres/scripts/:/docker-entrypoint-initdb.d/:ro
      - /etc/passwd:/etc/passwd:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    secrets:
      - authentik_postgres_admin_password
    command: --config_file=/etc/postgresql/postgres.conf
    ports:
      - 5434:5432
    networks:
      - authentik
    user: "${USER_ID}:${GROUP_ID}"
  redis_authentik:
    image: docker.io/library/redis:8.2.0-alpine
    container_name: redis_authentik
    command: --save 60 1 --loglevel warning
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    networks:
      - authentik
    volumes:
      - ./authentik/redis/data:/data
    user: "${USER_ID}:${GROUP_ID}"
  authentik_server:
    image: ghcr.io/goauthentik/server:2025.6.4
    restart: unless-stopped
    command: server
    environment:
      AUTHENTIK_REDIS__HOST: redis_authentik
      AUTHENTIK_POSTGRESQL__HOST: postgres_authentik
      AUTHENTIK_POSTGRESQL__USER: authentik
      AUTHENTIK_POSTGRESQL__NAME: authentik_db
    volumes:
      - ./authentik/media:/media
      - ./authentik/custom-templates:/templates
    env_file:
      - .secrets/authentik_admin_password.env
    user: "${USER_ID}:${GROUP_ID}"
    networks:
      - authentik
      - caddy_proxy
    labels:
      caddy: auth.fabricant.ucsd.edu
      caddy.reverse_proxy: "{{upstreams 9000}}"
    depends_on:
      postgres_authentik:
        condition: service_healthy
      redis_authentik:
        condition: service_healthy
  authentik_worker:
    image: ghcr.io/goauthentik/server:2025.6.4
    restart: unless-stopped
    command: worker
    environment:
      AUTHENTIK_REDIS__HOST: redis_authentik
      AUTHENTIK_POSTGRESQL__HOST: postgres_authentik
      AUTHENTIK_POSTGRESQL__USER: authentik
      AUTHENTIK_POSTGRESQL__NAME: authentik_db
    # `user: root` and the docker socket volume are optional.
    # See more for the docker socket integration here:
    # https://goauthentik.io/docs/outposts/integrations/docker
    # Removing `user: root` also prevents the worker from fixing the permissions
    # on the mounted folders, so when removing this make sure the folders have the correct UID/GID
    # (1000:1000 by default)
    user: root
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./authentik/media:/media
      - ./authentik/certs:/certs
      - ./authentik/custom-templates:/templates
    env_file:
      - .secrets/authentik_admin_password.env
    networks:
      - authentik
    depends_on:
      postgres_authentik:
        condition: service_healthy
      redis_authentik:
        condition: service_healthy
  

  # minio:
  #   image: quay.io/minio/minio
  #   container_name: minio
  #   restart: always
  #   volumes:
  #     - ./minio:/data
  #   environment:
  #     MINIO_ROOT_USER: e4e_minio_admin
  #     MINIO_ROOT_PASSWORD_FILE: /run/secrets/minio_admin_password
  #   command: server /data --console-address ":9001"
  #   secrets:
  #     - minio_admin_password
  #   networks:
  #     - caddy_proxy
  #   labels:
  #     caddy_0: s3.fabricant.ucsd.edu
  #     caddy_0.reverse_proxy: "{{upstreams 9000}}"
  #     caddy_1: mc.fabricant.ucsd.edu
  #     caddy_1.reverse_proxy: "{{upstreams 9001}}"
secrets:
  grafana_e4eadmin_password:
    file: .secrets/gf_admin_password.txt
  postgres_admin_password:
    file: .secrets/postgres_admin_password.txt
  authentik_postgres_admin_password:
    file: .secrets/authentik_postgres_admin_password.txt
  minio_admin_password:
    file: .secrets/minio_admin_password.txt
networks:
  label_studio:
  authentik:
  caddy_proxy:
    external: true

